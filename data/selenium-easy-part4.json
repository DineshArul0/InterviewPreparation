[
  { "id": "selenium-theory-easy-076", "type": "theory", "difficulty": "Easy", "question": "How do you handle a prompt alert (with a text box)?", "answer": "You switch to the alert, use `.sendKeys(\"text\")` to type into it, and then call `.accept()` or `.dismiss()`." },
  { "id": "selenium-theory-easy-077", "type": "theory", "difficulty": "Easy", "question": "What is the `JavascriptExecutor`?", "answer": "An interface that allows you to execute JavaScript code from your Selenium script. It's useful for actions that are difficult to perform with standard WebDriver commands, like scrolling." },
  { "id": "selenium-theory-easy-078", "type": "theory", "difficulty": "Easy", "question": "How do you scroll down a page?", "answer": "A common way is to use the `JavascriptExecutor`. For example: `js.executeScript(\"window.scrollBy(0, 500)\");`." },
  { "id": "selenium-theory-easy-079", "type": "theory", "difficulty": "Easy", "question": "What is a data-driven test?", "answer": "A test that reads input values and expected output values from an external data source (like a CSV file or Excel sheet) and runs the same test logic for each set of data." },
  { "id": "selenium-theory-easy-080", "type": "theory", "difficulty": "Easy", "question": "What is a keyword-driven test?", "answer": "A testing framework that separates the test logic into keywords (actions like 'login', 'clickButton'). Test cases are created by combining these keywords, often in a spreadsheet, making it easier for non-programmers to write tests." },
  { "id": "selenium-theory-easy-081", "type": "theory", "difficulty": "Easy", "question": "What is BDD (Behavior-Driven Development)?", "answer": "BDD is a software development process that encourages collaboration between developers, QA, and non-technical business participants. Tests are written in a natural, human-readable language." },
  { "id": "selenium-theory-easy-082", "type": "theory", "difficulty": "Easy", "question": "What is Gherkin?", "answer": "Gherkin is the simple, human-readable language used to write test scenarios in BDD frameworks like Cucumber. It uses keywords like `Given`, `When`, `Then`." },
  { "id": "selenium-theory-easy-083", "type": "theory", "difficulty": "Easy", "question": "What is the purpose of the `Given` keyword in Gherkin?", "answer": "`Given` is used to describe the initial state or precondition of the system before the test begins." },
  { "id": "selenium-theory-easy-084", "type": "theory", "difficulty": "Easy", "question": "What is the purpose of the `When` keyword in Gherkin?", "answer": "`When` is used to describe the action or event that the user performs." },
  { "id": "selenium-theory-easy-085", "type": "theory", "difficulty": "Easy", "question": "What is the purpose of the `Then` keyword in Gherkin?", "answer": "`Then` is used to describe the expected outcome or result, where the assertions are made." },
  { "id": "selenium-theory-easy-086", "type": "theory", "difficulty": "Easy", "question": "What is Cucumber?", "answer": "Cucumber is a popular BDD tool that allows you to write automated tests in the Gherkin language. It reads the feature files and executes the corresponding test code." },
  { "id": "selenium-theory-easy-087", "type": "theory", "difficulty": "Easy", "question": "What are step definitions?", "answer": "Step definitions are the code implementation for the Gherkin steps in a feature file. They are the bridge between the human-readable test and the application automation code." },
  { "id": "selenium-theory-easy-088", "type": "theory", "difficulty": "Easy", "question": "What is a feature file?", "answer": "A file with a `.feature` extension that contains the test scenarios written in the Gherkin language. It serves as both documentation and an executable specification." },
  { "id": "selenium-theory-easy-089", "type": "theory", "difficulty": "Easy", "question": "What is a `Scenario` in a feature file?", "answer": "A `Scenario` is a single, concrete example of a behavior of the system. It consists of a series of `Given`, `When`, and `Then` steps." },
  { "id": "selenium-theory-easy-090", "type": "theory", "difficulty": "Easy", "question": "What is a `Scenario Outline`?", "answer": "A `Scenario Outline` is used to run the same scenario multiple times with different sets of data, which are provided in an `Examples` table." },
  { "id": "selenium-theory-easy-091", "type": "theory", "difficulty": "Easy", "question": "What is a `Background` in a feature file?", "answer": "A `Background` is used to define a set of steps that are common to all scenarios in a feature file. It runs before each scenario." },
  { "id": "selenium-theory-easy-092", "type": "theory", "difficulty": "Easy", "question": "What are tags in Cucumber?", "answer": "Tags (e.g., `@smoke`, `@regression`) are used to organize and group scenarios. You can then choose to run only the scenarios that have a specific tag." },
  { "id": "selenium-theory-easy-093", "type": "theory", "difficulty": "Easy", "question": "What is a 'dry run' in Cucumber?", "answer": "A dry run (`--dry-run`) checks if all the steps in the feature files have corresponding step definitions without actually executing the test code." },
  { "id": "selenium-theory-easy-094", "type": "theory", "difficulty": "Easy", "question": "What is the Test Pyramid?", "answer": "A model that suggests a strategy for test automation. It recommends having a large base of fast unit tests, a smaller layer of integration tests, and a very small layer of slow end-to-end UI tests." },
  { "id": "selenium-theory-easy-095", "type": "theory", "difficulty": "Easy", "question": "What is a headless browser?", "answer": "A web browser without a graphical user interface. Running tests in a headless browser is faster and more efficient, especially in a CI/CD environment." },
  { "id": "selenium-theory-easy-096", "type": "theory", "difficulty": "Easy", "question": "How do you run tests in a headless browser?", "answer": "You configure the browser options before creating the WebDriver instance. For example, with Chrome, you would use `ChromeOptions` and add the `--headless` argument." },
  { "id": "selenium-theory-easy-097", "type": "theory", "difficulty": "Easy", "question": "What is the `getOptions()` method in the `Select` class?", "answer": "It returns a `List<WebElement>` of all the `<option>` elements within that select dropdown." },
  { "id": "selenium-theory-easy-098", "type": "theory", "difficulty": "Easy", "question": "What is the `getAllSelectedOptions()` method in the `Select` class?", "answer": "It returns a `List<WebElement>` of all the currently selected options. This is mainly used for multi-select dropdowns." },
  { "id": "selenium-theory-easy-099", "type": "theory", "difficulty": "Easy", "question": "What is the `getFirstSelectedOption()` method in the `Select` class?", "answer": "It returns the first currently selected option as a `WebElement`." },
  { "id": "selenium-theory-easy-100", "type": "theory", "difficulty": "Easy", "question": "What is the purpose of a test report?", "answer": "A test report summarizes the results of test execution, providing details on passed, failed, and skipped tests. It is crucial for communicating the status of the application's quality to stakeholders." }
]
