[
  { "id": "selenium-theory-easy-001", "type": "theory", "difficulty": "Easy", "question": "What is Selenium?", "answer": "Selenium is a free, open-source suite of tools for automating web browsers. It is primarily used for testing web applications, but can also be used for web scraping and other automation tasks." },
  { "id": "selenium-theory-easy-002", "type": "theory", "difficulty": "Easy", "question": "What are the main components of the Selenium suite?", "answer": "The main components are: Selenium WebDriver (the core API), Selenium IDE (a browser extension for recording and playback), and Selenium Grid (for running tests in parallel)." },
  { "id": "selenium-theory-easy-003", "type": "theory", "difficulty": "Easy", "question": "What is Selenium WebDriver?", "answer": "Selenium WebDriver is the core component of the Selenium suite. It is a programming interface (API) that allows you to write code to control web browsers programmatically." },
  { "id": "selenium-theory-easy-004", "type": "theory", "difficulty": "Easy", "question": "Which programming languages are supported by Selenium WebDriver?", "answer": "Selenium supports several popular languages, including Java, Python, C#, JavaScript, Ruby, and Kotlin." },
  { "id": "selenium-theory-easy-005", "type": "theory", "difficulty": "Easy", "question": "What is a locator in Selenium?", "answer": "A locator is a command that tells Selenium how to find a specific web element on a page. It's the address of an element." },
  { "id": "selenium-theory-easy-006", "type": "theory", "difficulty": "Easy", "question": "Name at least 5 different types of locators.", "answer": "Common locators are: `id`, `name`, `className`, `tagName`, `linkText`, `partialLinkText`, `cssSelector`, and `xpath`." },
  { "id": "selenium-theory-easy-007", "type": "theory", "difficulty": "Easy", "question": "What is the difference between `findElement` and `findElements`?", "answer": "`findElement` returns the first matching web element. If no element is found, it throws a `NoSuchElementException`. `findElements` returns a list of all matching web elements. If none are found, it returns an empty list." },
  { "id": "selenium-theory-easy-008", "type": "theory", "difficulty": "Easy", "question": "How do you click a button in Selenium?", "answer": "First, you locate the button element, and then you call the `.click()` method on it. For example: `driver.findElement(By.id(\"myButton\")).click();`" },
  { "id": "selenium-theory-easy-009", "type": "theory", "difficulty": "Easy", "question": "How do you type text into an input field?", "answer": "You locate the input field element and then use the `.sendKeys(\"your text\")` method. For example: `driver.findElement(By.name(\"username\")).sendKeys(\"testuser\");`" },
  { "id": "selenium-theory-easy-010", "type": "theory", "difficulty": "Easy", "question": "How do you get the text of a web element?", "answer": "You locate the element and then use the `.getText()` method, which returns the visible text of the element as a String." },
  { "id": "selenium-theory-easy-011", "type": "theory", "difficulty": "Easy", "question": "What is the difference between `driver.close()` and `driver.quit()`?", "answer": "`driver.close()` closes the currently focused browser window. `driver.quit()` closes all browser windows opened by the WebDriver session and safely ends the session." },
  { "id": "selenium-theory-easy-012", "type": "theory", "difficulty": "Easy", "question": "How do you navigate to a URL?", "answer": "Using the `driver.get(\"http://example.com\")` method. This will wait for the page to fully load before proceeding." },
  { "id": "selenium-theory-easy-013", "type": "theory", "difficulty": "Easy", "question": "How do you navigate back and forward in browser history?", "answer": "You use `driver.navigate().back()` to go back and `driver.navigate().forward()` to go forward." },
  { "id": "selenium-theory-easy-014", "type": "theory", "difficulty": "Easy", "question": "How do you refresh a web page?", "answer": "You use the `driver.navigate().refresh()` method." },
  { "id": "selenium-theory-easy-015", "type": "theory", "difficulty": "Easy", "question": "What is the `Select` class used for?", "answer": "The `Select` class is used to interact with HTML dropdown elements (`<select>`). It provides methods to select options by their visible text, value, or index." },
  { "id": "selenium-theory-easy-016", "type": "theory", "difficulty": "Easy", "question": "How do you select an option from a dropdown?", "answer": "Create a `Select` object with the dropdown element, then use a method like `selectByVisibleText(\"Option Text\")`, `selectByValue(\"option_value\")`, or `selectByIndex(1)`." },
  { "id": "selenium-theory-easy-017", "type": "theory", "difficulty": "Easy", "question": "How do you check if an element is displayed on the page?", "answer": "You locate the element and then use the `.isDisplayed()` method, which returns `true` if the element is visible and `false` otherwise." },
  { "id": "selenium-theory-easy-018", "type": "theory", "difficulty": "Easy", "question": "How do you check if an element is enabled?", "answer": "You locate the element and use the `.isEnabled()` method. This is often used for buttons or input fields to check if they are active." },
  { "id": "selenium-theory-easy-019", "type": "theory", "difficulty": "Easy", "question": "How do you check if a checkbox or radio button is selected?", "answer": "You locate the element and use the `.isSelected()` method." },
  { "id": "selenium-theory-easy-020", "type": "theory", "difficulty": "Easy", "question": "What is an alert in Selenium?", "answer": "An alert is a small pop-up box that displays a message and requires the user to take an action, like clicking 'OK' or 'Cancel'." },
  { "id": "selenium-theory-easy-021", "type": "theory", "difficulty": "Easy", "question": "How do you handle a simple alert?", "answer": "You switch to the alert using `driver.switchTo().alert()` and then call the `.accept()` method to click 'OK'." },
  { "id": "selenium-theory-easy-022", "type": "theory", "difficulty": "Easy", "question": "How do you get the text from an alert?", "answer": "You switch to the alert using `driver.switchTo().alert()` and then call the `.getText()` method." },
  { "id": "selenium-theory-easy-023", "type": "theory", "difficulty": "Easy", "question": "What is an iframe?", "answer": "An iframe (inline frame) is an HTML document embedded inside another HTML document. Selenium treats it as a separate context." },
  { "id": "selenium-theory-easy-024", "type": "theory", "difficulty": "Easy", "question": "How do you switch to an iframe?", "answer": "You use the `driver.switchTo().frame()` method. You can identify the frame by its index, name/ID, or by passing the frame's WebElement." },
  { "id": "selenium-theory-easy-025", "type": "theory", "difficulty": "Easy", "question": "How do you switch back to the main page from an iframe?", "answer": "You use the `driver.switchTo().defaultContent()` method." }
]
