[
  {
    "id": "java-easy-001",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What are the four main principles of Object-Oriented Programming (OOP)?",
    "answer": "Encapsulation, Abstraction, Inheritance, and Polymorphism."
  },
  {
    "id": "java-easy-002",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the difference between `JDK`, `JRE`, and `JVM`?",
    "answer": "`JVM` (Java Virtual Machine) is the runtime that executes bytecode. `JRE` (Java Runtime Environment) includes the JVM and standard libraries. `JDK` (Java Development Kit) includes the JRE and development tools (like the compiler)."
  },
  {
    "id": "java-easy-003",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is a class in Java?",
    "answer": "A blueprint or template for creating objects. It defines the properties (fields) and behaviors (methods) that objects of that type will have."
  },
  {
    "id": "java-easy-004",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is an object in Java?",
    "answer": "An instance of a class. It has a state (defined by its fields) and behavior (defined by its methods)."
  },
  {
    "id": "java-easy-005",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the purpose of a constructor?",
    "answer": "To initialize a new object. It's called when an object is created using the `new` keyword."
  },
  {
    "id": "java-easy-006",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the `this` keyword?",
    "answer": "It refers to the current object instance. It's used to resolve ambiguity between instance variables and parameters, or to call another constructor from within a constructor."
  },
  {
    "id": "java-easy-007",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the difference between `==` and the `.equals()` method?",
    "answer": "`==` checks if two references point to the same memory location (reference equality). `.equals()` checks if the two objects have the same value (content equality), assuming it's properly overridden."
  },
  {
    "id": "java-easy-008",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is a primitive data type? Name a few.",
    "answer": "A basic data type that is not an object. Examples: `int`, `double`, `char`, `boolean`, `long`, `short`, `byte`, `float`."
  },
  {
    "id": "java-easy-009",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is method overloading?",
    "answer": "Defining multiple methods with the same name in the same class, but with different parameters (either number, type, or order of parameters)."
  },
  {
    "id": "java-easy-010",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is method overriding?",
    "answer": "A subclass providing a specific implementation for a method that is already defined in its superclass."
  },
  {
    "id": "java-easy-011",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the `static` keyword used for?",
    "answer": "It indicates that a variable or method belongs to the class itself, not to any specific instance of the class."
  },
  {
    "id": "java-easy-012",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is an interface?",
    "answer": "A reference type that can contain only constants, method signatures, default methods, static methods, and nested types. It cannot be instantiated and is used to achieve abstraction."
  },
  {
    "id": "java-easy-013",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is an abstract class?",
    "answer": "A class that cannot be instantiated and may contain abstract methods (methods without a body). It is designed to be subclassed."
  },
  {
    "id": "java-easy-014",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the `final` keyword?",
    "answer": "A modifier that can be applied to variables (to make them constants), methods (to prevent overriding), and classes (to prevent inheritance)."
  },
  {
    "id": "java-easy-015",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is an exception?",
    "answer": "An event that disrupts the normal flow of a program's instructions."
  },
  {
    "id": "java-easy-016",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the purpose of the `try-catch` block?",
    "answer": "To handle exceptions. The `try` block contains code that might throw an exception, and the `catch` block contains the code to handle it."
  },
  {
    "id": "java-easy-017",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the `finally` block?",
    "answer": "A block that is always executed after the `try-catch` block, regardless of whether an exception was thrown or caught. It's often used for cleanup code."
  },
  {
    "id": "java-easy-018",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the root class of all classes in Java?",
    "answer": "The `java.lang.Object` class."
  },
  {
    "id": "java-easy-019",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is a package in Java?",
    "answer": "A way to group related classes and interfaces, helping to organize code and prevent naming conflicts."
  },
  {
    "id": "java-easy-020",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is an access modifier? Name them.",
    "answer": "Keywords that set the accessibility of classes, methods, and other members. They are: `public`, `protected`, `default` (package-private), and `private`."
  },
  {
    "id": "java-easy-021",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is the difference between a `String`, `StringBuilder`, and `StringBuffer`?",
    "answer": "`String` is immutable. `StringBuilder` is mutable and not thread-safe (faster). `StringBuffer` is mutable and thread-safe (slower)."
  },
  {
    "id": "java-easy-022",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is autoboxing and unboxing?",
    "answer": "Autoboxing is the automatic conversion of a primitive type to its corresponding wrapper class object (e.g., `int` to `Integer`). Unboxing is the reverse."
  },
  {
    "id": "java-easy-023",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is inheritance?",
    "answer": "A mechanism where one class (the subclass) acquires the properties and behaviors of another class (the superclass)."
  },
  {
    "id": "java-easy-024",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is polymorphism?",
    "answer": "The ability of an object to take on many forms. In Java, it's often achieved through method overriding (runtime polymorphism) and method overloading (compile-time polymorphism)."
  },
  {
    "id": "java-easy-025",
    "type": "theory",
    "difficulty": "Easy",
    "question": "What is encapsulation?",
    "answer": "Bundling the data (fields) and the methods that operate on that data into a single unit (a class), and restricting access to the data from outside the class."
  }
]
