[
  { "id": "selenium-theory-easy-051", "type": "theory", "difficulty": "Easy", "question": "How do you maximize the browser window?", "answer": "You use the command `driver.manage().window().maximize()`." },
  { "id": "selenium-theory-easy-052", "type": "theory", "difficulty": "Easy", "question": "How do you handle cookies?", "answer": "You can manage cookies using `driver.manage()`. Methods include `addCookie()`, `getCookieNamed()`, `getCookies()`, and `deleteAllCookies()`." },
  { "id": "selenium-theory-easy-053", "type": "theory", "difficulty": "Easy", "question": "What is the `Actions` class?", "answer": "The `Actions` class is used to build a sequence of complex user interactions, such as mouse movements, drag and drop, or keyboard events." },
  { "id": "selenium-theory-easy-054", "type": "theory", "difficulty": "Easy", "question": "How do you perform a mouse hover (mouseover) action?", "answer": "You create an `Actions` object, then use the `moveToElement(element)` method, followed by `.build().perform()`." },
  { "id": "selenium-theory-easy-055", "type": "theory", "difficulty": "Easy", "question": "How do you perform a right-click (context click)?", "answer": "You use the `Actions` class with the `contextClick(element)` method, followed by `.build().perform()`." },
  { "id": "selenium-theory-easy-056", "type": "theory", "difficulty": "Easy", "question": "How do you perform a double-click?", "answer": "You use the `Actions` class with the `doubleClick(element)` method, followed by `.build().perform()`." },
  { "id": "selenium-theory-easy-057", "type": "theory", "difficulty": "Easy", "question": "What is the Page Object Model (POM)?", "answer": "POM is a design pattern where each web page is represented as a class. This class contains the locators and methods to interact with the elements on that page, improving test maintainability." },
  { "id": "selenium-theory-easy-058", "type": "theory", "difficulty": "Easy", "question": "What is the main advantage of using the Page Object Model?", "answer": "The main advantage is that it separates the test logic from the UI interaction logic. If the UI changes, you only need to update the page object class, not all the test scripts." },
  { "id": "selenium-theory-easy-059", "type": "theory", "difficulty": "Easy", "question": "What is Selenium IDE?", "answer": "Selenium IDE is a browser extension for Chrome and Firefox that allows you to record and playback user interactions. It's useful for beginners or for creating simple automation scripts quickly." },
  { "id": "selenium-theory-easy-060", "type": "theory", "difficulty": "Easy", "question": "What is Selenium Grid?", "answer": "Selenium Grid is a component of the Selenium suite that allows you to run your tests on different machines across different browsers in parallel. This speeds up test execution." },
  { "id": "selenium-theory-easy-061", "type": "theory", "difficulty": "Easy", "question": "What is a hub and node in Selenium Grid?", "answer": "The hub is the central server that receives test requests and routes them to available nodes. A node is a machine (physical or virtual) where the actual browser is running and the test is executed." },
  { "id": "selenium-theory-easy-062", "type": "theory", "difficulty": "Easy", "question": "What is a `NoSuchElementException`?", "answer": "This exception is thrown by `findElement` when it cannot find any element on the page that matches the given locator." },
  { "id": "selenium-theory-easy-063", "type": "theory", "difficulty": "Easy", "question": "What is a `TimeoutException`?", "answer": "This exception is thrown by an explicit wait (`WebDriverWait`) when the condition it was waiting for does not become true within the specified time limit." },
  { "id": "selenium-theory-easy-064", "type": "theory", "difficulty": "Easy", "question": "How do you get the CSS value of an element (e.g., color, font size)?", "answer": "You locate the element and use the `.getCssValue(\"property-name\")` method. For example, `.getCssValue(\"color\")`." },
  { "id": "selenium-theory-easy-065", "type": "theory", "difficulty": "Easy", "question": "What is the `submit()` method on a WebElement?", "answer": "The `.submit()` method can be called on any element within a form. It will trigger the form's submission. It's an alternative to clicking the submit button directly." },
  { "id": "selenium-theory-easy-066", "type": "theory", "difficulty": "Easy", "question": "What is the difference between an absolute and relative XPath?", "answer": "An absolute XPath starts from the root of the HTML document (e.g., `/html/body/div...`). A relative XPath starts from a known element (e.g., `//div[@id='main']//input`). Relative XPath is preferred because it's less likely to break." },
  { "id": "selenium-theory-easy-067", "type": "theory", "difficulty": "Easy", "question": "What does the `*` symbol mean in an XPath?", "answer": "The asterisk (`*`) is a wildcard that matches any element node. For example, `//div/*` selects all child elements of a `div`." },
  { "id": "selenium-theory-easy-068", "type": "theory", "difficulty": "Easy", "question": "What does the `.` symbol mean in an XPath?", "answer": "The dot (`.`) represents the current node. It's often used to select the current node or start a relative path from the current node." },
  { "id": "selenium-theory-easy-069", "type": "theory", "difficulty": "Easy", "question": "What does the `//` symbol mean in an XPath?", "answer": "The double slash (`//`) selects nodes in the document from the current node that match the selection, regardless of where they are in the hierarchy. It searches the entire document from the current context." },
  { "id": "selenium-theory-easy-070", "type": "theory", "difficulty": "Easy", "question": "How do you find an element by its text content using XPath?", "answer": "You use the `text()` function. For example, `//button[text()='Submit']` finds a button with the exact text 'Submit'." },
  { "id": "selenium-theory-easy-071", "type": "theory", "difficulty": "Easy", "question": "How do you find an element that contains certain text using XPath?", "answer": "You use the `contains()` function. For example, `//h1[contains(text(), 'Welcome')]` finds an h1 element that contains the word 'Welcome'." },
  { "id": "selenium-theory-easy-072", "type": "theory", "difficulty": "Easy", "question": "What is the `tagName` locator?", "answer": "The `tagName` locator is used to find elements by their HTML tag name, such as `div`, `a`, `input`, etc." },
  { "id": "selenium-theory-easy-073", "type": "theory", "difficulty": "Easy", "question": "What is the `className` locator?", "answer": "The `className` locator is used to find elements that have a specific CSS class. Note that it cannot be used if the class name contains spaces." },
  { "id": "selenium-theory-easy-074", "type": "theory", "difficulty": "Easy", "question": "What is a `StaleElementReferenceException`?", "answer": "This exception occurs when you try to interact with an element that is no longer attached to the DOM. This usually happens if the page has been refreshed or the element was removed by JavaScript." },
  { "id": "selenium-theory-easy-075", "type": "theory", "difficulty": "Easy", "question": "How do you handle a confirmation alert (OK/Cancel)?", "answer": "You switch to the alert using `driver.switchTo().alert()`. Then you can call `.accept()` to click OK or `.dismiss()` to click Cancel." }
]
